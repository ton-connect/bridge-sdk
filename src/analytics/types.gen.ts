// This file is auto-generated by @hey-api/openapi-ts

/**
 * The event is fired on SSE connection failure or unexpected disconnect.
 */
export type BridgeConnectErrorEvent = {
    /**
     * Bridge URL.
     */
    bridge_url?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Error code.
     */
    error_code?: number;
    /**
     * Error text.
     */
    error_message?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: 'bridge-connect-error';
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
};

/**
 * The event is fired when the bridge returns HTTP 200 OK and SSE handshake succeeds.
 */
export type BridgeConnectEstablishedEvent = {
    /**
     * Bridge URL.
     */
    bridge_url?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: 'bridge-connect-established';
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
};

/**
 * The event is fired when the dApp initiates the SSE connection via GET /events?client_id=... method.
 */
export type BridgeConnectStartedEvent = {
    /**
     * Bridge URL.
     */
    bridge_url?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: 'bridge-connect-started';
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
};

/**
 * When wallet sends response to bridge (SSE stream).
 */
export type BridgeRequestDecodeErrorEvent = {
    /**
     * Bridge URL.
     */
    bridge_url?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Error code.
     */
    error_code?: number;
    /**
     * Error message.
     */
    error_message?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: 'bridge-request-decode-error';
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
};

/**
 * When dApp POSTs a request to /message.
 */
export type BridgeRequestReceivedEvent = {
    /**
     * Bridge URL.
     */
    bridge_url?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: 'bridge-request-received';
    /**
     * Message ID.
     */
    message_id?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Request type.
     */
    request_type?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
};

/**
 * When dApp POSTs a request to /message.
 */
export type BridgeRequestSentEvent = {
    /**
     * Bridge URL.
     */
    bridge_url?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: 'bridge-request-sent';
    /**
     * Message ID.
     */
    message_id?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Request type.
     */
    request_type?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
};

/**
 * When bridge fails to decrypt or parse wallet's response.
 */
export type BridgeResponseDecodeErrorEvent = {
    /**
     * Bridge URL.
     */
    bridge_url?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Error code.
     */
    error_code?: number;
    /**
     * Error message.
     */
    error_message?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: 'bridge-response-decode-error';
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
};

/**
 * When wallet sends response to bridge (SSE stream).
 */
export type BridgeResponseReceivedEvent = {
    /**
     * Bridge URL.
     */
    bridge_url?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: 'bridge-response-received';
    /**
     * Message ID.
     */
    message_id?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Request type.
     */
    request_type?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
};

/**
 * Fired when a user successfully connected a wallet.
 */
export type ConnectionCompletedEvent = {
    /**
     * Time spent to connect to the TON Connect bridge (milliseconds).
     */
    bridge_connect_duration?: number;
    /**
     * Browser name: TB (Telegram browser), TMA (Telegram mini-app), BIW (Browser in wallet), Chrome, Mozilla,... The values are based on the TON Connect categories.
     */
    browser?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * User locale.
     */
    locale?: string;
    /**
     * TON Connect manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * URL of the current page.
     */
    origin_url?: string;
    /**
     * OS and platform name, it is recommended to use unified standard.
     */
    platform?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * true if the user has TG Premium.
     */
    tma_is_premium?: boolean;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet address in raw format in lower case.
     */
    wallet_address?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
    /**
     * Unique session ID on the wallet side.
     */
    wallet_id?: string;
    /**
     * Wallet account state init.
     */
    wallet_state_init?: string;
};

/**
 * Created when an error occurred during connection flow.
 */
export type ConnectionErrorEvent = {
    /**
     * Browser name: TB (Telegram browser), TMA (Telegram mini-app), BIW (Browser in wallet), Chrome, Mozilla,... The values are based on the TON Connect categories.
     */
    browser?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Error code.
     */
    error_code?: number;
    /**
     * Error message.
     */
    error_message?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * User locale.
     */
    locale?: string;
    /**
     * TON Connect manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * URL of the current page.
     */
    origin_url?: string;
    /**
     * OS and platform name, it is recommended to use unified standard.
     */
    platform?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * true if the user has TG Premium.
     */
    tma_is_premium?: boolean;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Unique session ID on the wallet side.
     */
    wallet_id?: string;
};

/**
 * This event should be sent when a user selected and forwarded to the wallet app.
 */
export type ConnectionSelectedWalletEvent = {
    /**
     * Browser name: TB (Telegram browser), TMA (Telegram mini-app), BIW (Browser in wallet), Chrome, Mozilla,... The values are based on the TON Connect categories.
     */
    browser?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * User locale.
     */
    locale?: string;
    /**
     * List of the wallets on the main screen.
     */
    main_screen?: Array<string>;
    /**
     * TON Connect manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * URL of the current page (excluding query and hash part of the URL).
     */
    origin_url?: string;
    /**
     * OS and platform name based on the TON Connect categories. If it is impossible to determine a platform the unknown value should be used.
     */
    platform?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * Whether the user has Telegram Premium.
     */
    tma_is_premium?: boolean;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * URL used to open the wallet without client_id.
     */
    wallet_redirect_link?: string;
    /**
     * Redirect method: tg_link, external_link.
     */
    wallet_redirect_method?: string;
    /**
     * One of explicit_wallet, main_screen, other_wallets.
     */
    wallets_menu?: string;
};

/**
 * This event should be sent when a user begins the wallet connection process.
 */
export type ConnectionStartedEvent = {
    /**
     * Time spent to connect to the TON Connect bridge (milliseconds).
     */
    bridge_connect_duration?: number;
    /**
     * Browser name: TB (Telegram browser), TMA (Telegram mini-app), BIW (Browser in wallet), Chrome, Mozilla,... The values are based on the TON Connect categories.
     */
    browser?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * User locale.
     */
    locale?: string;
    /**
     * List of the wallets on the main screen.
     */
    main_screen?: Array<string>;
    /**
     * TON Connect manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * URL of the current page (excluding query and hash part of the URL).
     */
    origin_url?: string;
    /**
     * OS and platform name based on the TON Connect categories. If it is impossible to determine a platform the unknown value should be used.
     */
    platform?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * Whether the user has Telegram Premium.
     */
    tma_is_premium?: boolean;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
};

/**
 * Created when a user initiated disconnection of the wallet.
 */
export type DisconnectionEvent = {
    /**
     * Browser name: TB (Telegram browser), TMA (Telegram mini-app), BIW (Browser in wallet), Chrome, Mozilla,... The values are based on the TON Connect categories.
     */
    browser?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * User locale.
     */
    locale?: string;
    /**
     * TON Connect manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * URL of the current page.
     */
    origin_url?: string;
    /**
     * OS and platform name, it is recommended to use unified standard.
     */
    platform?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * true if the user has TG Premium.
     */
    tma_is_premium?: boolean;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet address in raw format in lower case.
     */
    wallet_address?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
    /**
     * Unique session ID on the wallet side.
     */
    wallet_id?: string;
    /**
     * Wallet account state init.
     */
    wallet_state_init?: string;
};

/**
 * Whenever the dApp invokes window[bridgeKey].tonconnect.method(...).
 */
export type JsBridgeCallEvent = {
    /**
     * Bridge key from wallet list json.
     */
    bridge_key?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * Method (connect, restoreConnection, send, listen).
     */
    js_bridge_method?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
};

/**
 * When the JS bridge returns a promise from the method call.
 */
export type JsBridgeErrorEvent = {
    /**
     * Bridge key from wallet list json.
     */
    bridge_key?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Error code.
     */
    error_code?: number;
    /**
     * Error message
     */
    error_message?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * Method (connect, restoreConnection, send, listen).
     */
    js_bridge_method?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
};

/**
 * When the JS bridge returns a promise from the method call.
 */
export type JsBridgeResponseEvent = {
    /**
     * Bridge key from wallet list json.
     */
    bridge_key?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * Method (connect, restoreConnection, send, listen).
     */
    js_bridge_method?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
};

export type Message = {
    address?: string;
    amount?: number;
    payload?: string;
};

export type TonConnectEvent = {
    bridge_connect_duration?: number;
    bridge_key?: string;
    bridge_url?: string;
    browser?: string;
    callback_return_action?: string;
    client_environment?: string;
    client_id?: string;
    client_timestamp?: number;
    dapp_name?: string;
    decline_reason?: string;
    emulation_success?: boolean;
    encrypted_message_hash?: string;
    error_code?: number;
    error_message?: string;
    event_id?: string;
    event_name?: string;
    is_ton_addr?: boolean;
    is_ton_proof?: boolean;
    js_bridge_method?: string;
    locale?: string;
    main_screen?: Array<string>;
    manifest_json_url?: string;
    message_id?: string;
    messages?: Array<Message>;
    network_id?: string;
    normalized_hash?: string;
    origin_url?: string;
    payload?: string;
    platform?: string;
    proof_payload_size?: number;
    request_type?: string;
    signed_boc?: string;
    subsystem?: string;
    tg_id?: number;
    tma_is_premium?: boolean;
    trace_id?: string;
    user_id?: string;
    valid_until?: number;
    verification_result?: string;
    version?: string;
    versions?: {
        [key: string]: string;
    };
    wallet_address?: string;
    wallet_app_name?: string;
    wallet_app_version?: string;
    wallet_id?: string;
    wallet_redirect_link?: string;
    wallet_redirect_method?: string;
    wallet_state_init?: string;
    wallets_menu?: string;
};

/**
 * Created when a user sends a transaction for signature.
 */
export type TransactionSentEvent = {
    /**
     * Time spent to connect to the TON Connect bridge (milliseconds).
     */
    bridge_connect_duration?: number;
    /**
     * Browser name: TB (Telegram browser), TMA (Telegram mini-app), BIW (Browser in wallet), Chrome, Mozilla,... The values are based on the TON Connect categories.
     */
    browser?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Hash of the encrypted message.
     */
    encrypted_message_hash?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * User locale.
     */
    locale?: string;
    /**
     * TON Connect manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * URL of the current page.
     */
    origin_url?: string;
    /**
     * OS and platform name, it is recommended to use unified standard.
     */
    platform?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * true if the user has TG Premium.
     */
    tma_is_premium?: boolean;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet address in raw format in lower case.
     */
    wallet_address?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
    /**
     * Unique session ID on the wallet side.
     */
    wallet_id?: string;
    /**
     * Wallet account state init.
     */
    wallet_state_init?: string;
};

/**
 * Created when a user signed a transaction successfully.
 */
export type TransactionSignedEvent = {
    /**
     * Browser name: TB (Telegram browser), TMA (Telegram mini-app), BIW (Browser in wallet), Chrome, Mozilla,... The values are based on the TON Connect categories.
     */
    browser?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * User locale.
     */
    locale?: string;
    /**
     * TON Connect manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * URL of the current page.
     */
    origin_url?: string;
    /**
     * OS and platform name, it is recommended to use unified standard.
     */
    platform?: string;
    /**
     * Bag of cells with a signed external message.
     */
    signed_boc?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * true if the user has TG Premium.
     */
    tma_is_premium?: boolean;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet address in raw format in lower case.
     */
    wallet_address?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
    /**
     * Unique session ID on the wallet side.
     */
    wallet_id?: string;
    /**
     * Wallet account state init.
     */
    wallet_state_init?: string;
};

/**
 * Created when a user signed a transaction successfully.
 */
export type TransactionSigningFailedEvent = {
    /**
     * Browser name: TB (Telegram browser), TMA (Telegram mini-app), BIW (Browser in wallet), Chrome, Mozilla,... The values are based on the TON Connect categories.
     */
    browser?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Error code.
     */
    error_code?: number;
    /**
     * Error message.
     */
    error_message?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * User locale.
     */
    locale?: string;
    /**
     * TON Connect manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Array of message objects.
     */
    messages?: Array<Message>;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * URL of the current page.
     */
    origin_url?: string;
    /**
     * OS and platform name, it is recommended to use unified standard.
     */
    platform?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * true if the user has TG Premium.
     */
    tma_is_premium?: boolean;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * Timestamp for transaction expiration.
     */
    valid_until?: number;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet address in raw format in lower case.
     */
    wallet_address?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
    /**
     * Unique session ID on the wallet side.
     */
    wallet_id?: string;
    /**
     * Wallet account state init.
     */
    wallet_state_init?: string;
};

/**
 * When the user approves the connection in the wallet.
 */
export type WalletConnectAcceptedEvent = {
    /**
     * (ret param from connection request).
     */
    callback_return_action?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * dApp name from the manifest.
     */
    dapp_name?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * ton_addr flag.
     */
    is_ton_addr?: boolean;
    /**
     * Is proof was used.
     */
    is_ton_proof?: boolean;
    /**
     * Manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Origin URL from the manifest.
     */
    origin_url?: string;
    /**
     * Size of the proof payload in bytes.
     */
    proof_payload_size?: number;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * unknown, ok, warning, danger.
     */
    verification_result?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
};

/**
 * When the user approves the connection in the wallet.
 */
export type WalletConnectRejectedEvent = {
    /**
     * (ret param from connection request).
     */
    callback_return_action?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * dApp name from the manifest.
     */
    dapp_name?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * ton_addr flag.
     */
    is_ton_addr?: boolean;
    /**
     * Is proof was used.
     */
    is_ton_proof?: boolean;
    /**
     * Manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Origin URL from the manifest.
     */
    origin_url?: string;
    /**
     * Size of the proof payload in bytes.
     */
    proof_payload_size?: number;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * unknown, ok, warning, danger.
     */
    verification_result?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
};

/**
 * When the wallet receives a connection request from the dApp.
 */
export type WalletConnectRequestReceivedEvent = {
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * ton_addr flag.
     */
    is_ton_addr?: boolean;
    /**
     * Is proof was used.
     */
    is_ton_proof?: boolean;
    /**
     * TON Connect manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Size of the proof payload in bytes
     */
    proof_payload_size?: number;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
};

/**
 * When the wallet displays UI asking the user to confirm the connection.
 */
export type WalletConnectRequestUiDisplayedEvent = {
    /**
     * (ret param from connection request).
     */
    callback_return_action?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * dApp name from the manifest.
     */
    dapp_name?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * ton_addr flag.
     */
    is_ton_addr?: boolean;
    /**
     * Is proof was used.
     */
    is_ton_proof?: boolean;
    /**
     * Manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Origin URL from the manifest.
     */
    origin_url?: string;
    /**
     * Size of the proof payload in bytes.
     */
    proof_payload_size?: number;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * unknown, ok, warning, danger.
     */
    verification_result?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
};

/**
 * When the wallet sends the connection approval/rejection to the dApp.
 */
export type WalletConnectResponseSentEvent = {
    /**
     * (ret param from connection request).
     */
    callback_return_action?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * dApp name from the manifest.
     */
    dapp_name?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * ton_addr flag.
     */
    is_ton_addr?: boolean;
    /**
     * Is proof was used.
     */
    is_ton_proof?: boolean;
    /**
     * Manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Origin URL from the manifest.
     */
    origin_url?: string;
    /**
     * Size of the proof payload in bytes.
     */
    proof_payload_size?: number;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * unknown, ok, warning, danger.
     */
    verification_result?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
};

/**
 * When the user approves the data signing in the wallet.
 */
export type WalletSignDataAcceptedEvent = {
    /**
     * (ret param from connection request)
     */
    callback_return_action?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * dApp name from the manifest.
     */
    dapp_name?: string;
    /**
     * Hash of encrypted message received from the dApp.
     */
    encrypted_message_hash?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * Manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Origin URL from the manifest.
     */
    origin_url?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
    /**
     * Unique wallet ID.
     */
    wallet_id?: string;
};

/**
 * When the wallet displays the sign-data confirmation UI.
 */
export type WalletSignDataConfirmationUiDisplayedEvent = {
    /**
     * (ret param from connection request)
     */
    callback_return_action?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * dApp name from the manifest.
     */
    dapp_name?: string;
    /**
     * Hash of encrypted message received from the dApp.
     */
    encrypted_message_hash?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * Manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Origin URL from the manifest.
     */
    origin_url?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * Verification result.
     */
    verification_result?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
    /**
     * Unique wallet ID.
     */
    wallet_id?: string;
};

/**
 * When the wallet receives a sign-data request from the dApp.
 */
export type WalletSignDataRequestReceivedEvent = {
    /**
     * (ret param from connection request)
     */
    callback_return_action?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * dApp name from the manifest.
     */
    dapp_name?: string;
    /**
     * Hash of encrypted message received from the dApp.
     */
    encrypted_message_hash?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * Manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Origin URL from the manifest.
     */
    origin_url?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
    /**
     * Unique wallet ID.
     */
    wallet_id?: string;
};

/**
 * When the wallet sends the signed data to the dApp.
 */
export type WalletSignDataSentEvent = {
    /**
     * (ret param from connection request).
     */
    callback_return_action?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * dApp name from the manifest.
     */
    dapp_name?: string;
    /**
     * Hash of encrypted message received from the dApp.
     */
    encrypted_message_hash?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * Manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Origin URL from the manifest.
     */
    origin_url?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
    /**
     * Unique wallet ID.
     */
    wallet_id?: string;
};

/**
 * When the user approves the transaction in the wallet. When the wallet receives a transaction request from the dApp.
 */
export type WalletTransactionAcceptedEvent = {
    /**
     * (ret param from connection request).
     */
    callback_return_action?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * dApp name from the manifest.
     */
    dapp_name?: string;
    /**
     * Hash of encrypted message received from the dApp.
     */
    encrypted_message_hash?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * Manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Origin URL from the manifest.
     */
    origin_url?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
    /**
     * Unique wallet ID.
     */
    wallet_id?: string;
};

/**
 * When the wallet displays the transaction confirmation UI.
 */
export type WalletTransactionConfirmationUiDisplayedEvent = {
    /**
     * (ret param from connection request).
     */
    callback_return_action?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * dApp name from the manifest.
     */
    dapp_name?: string;
    /**
     * Emulation status.
     */
    emulation_success?: boolean;
    /**
     * Hash of encrypted message received from the dApp.
     */
    encrypted_message_hash?: string;
    /**
     * Error code.
     */
    error_code?: number;
    /**
     * For emulation errors.
     */
    error_message?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * Manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Origin URL from the manifest.
     */
    origin_url?: string;
    /**
     * serialized JSON (only in case emulation is failed).
     */
    payload?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * unknown, ok, warning, danger.
     */
    verification_result?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
    /**
     * Unique wallet ID.
     */
    wallet_id?: string;
};

/**
 * When the user rejects the transaction in the wallet.
 */
export type WalletTransactionDeclinedEvent = {
    /**
     * (ret param from connection request).
     */
    callback_return_action?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * dApp name from the manifest.
     */
    dapp_name?: string;
    /**
     * Decline reason.
     */
    decline_reason?: string;
    /**
     * Hash of encrypted message received from the dApp.
     */
    encrypted_message_hash?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * Manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Origin URL from the manifest.
     */
    origin_url?: string;
    /**
     * serialized JSON.
     */
    payload?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
    /**
     * Unique wallet ID.
     */
    wallet_id?: string;
};

/**
 * When the wallet receives a transaction request from the dApp.
 */
export type WalletTransactionRequestReceivedEvent = {
    /**
     * (ret param from connection request).
     */
    callback_return_action?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * dApp name from the manifest.
     */
    dapp_name?: string;
    /**
     * Hash of encrypted message received from the dApp.
     */
    encrypted_message_hash?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * Manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Origin URL from the manifest.
     */
    origin_url?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
    /**
     * Unique wallet ID.
     */
    wallet_id?: string;
};

/**
 * When the wallet submits the signed transaction to the network.
 */
export type WalletTransactionSentBridgeEvent = {
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * Hash of encrypted message received from the dApp.
     */
    encrypted_message_hash?: string;
    /**
     * Bridge response code.
     */
    error_code?: number;
    /**
     * Bridge response message.
     */
    error_message?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Normalized transaction hash.
     */
    normalized_hash?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
};

/**
 * When the wallet submits the signed transaction to the network.
 */
export type WalletTransactionSentEvent = {
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * RPC response code.
     */
    error_code?: number;
    /**
     * RPC response message.
     */
    error_message?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Normalized transaction hash (encoded as base64).
     */
    normalized_hash?: string;
    /**
     * In case of failure.
     */
    signed_boc?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
};

/**
 * When the user rejects the data signing request in the wallet.
 */
export type ApiWalletSignDataDeclinedEvent = {
    /**
     * (ret param from connection request)
     */
    callback_return_action?: string;
    /**
     * The client environment.
     */
    client_environment?: string;
    /**
     * A unique session ID.
     */
    client_id?: string;
    /**
     * The timestamp of the event on the client side, in Unix time (stored as an integer).
     */
    client_timestamp?: number;
    /**
     * dApp name from the manifest.
     */
    dapp_name?: string;
    /**
     * Hash of encrypted message received from the dApp.
     */
    encrypted_message_hash?: string;
    /**
     * Unique random event UUID generated by the sender. Used for deduplication on the backend side.
     */
    event_id?: string;
    event_name?: string;
    /**
     * Manifest URL.
     */
    manifest_json_url?: string;
    /**
     * Network id (-239 for the mainnet and -3 for the testnet). Other values should be rejected.
     */
    network_id?: string;
    /**
     * Origin URL from the manifest.
     */
    origin_url?: string;
    /**
     * The subsystem used to collect the event (possible values: dapp, bridge, wallet).
     */
    subsystem?: string;
    /**
     * ID to aggregate multiple events into one trace. UUIDv7 must be used (first 48 bits must be unix_ts_ms as in the specification). trace_id older than 24h won't be accepted.
     */
    trace_id?: string;
    /**
     * A unique identifier for the user (refer to subsystem session details for more information). May be omitted, in this case it will be generated on the backend side and generated. UUID must be used.
     */
    user_id?: string;
    /**
     * The version of the sending subsystem.
     */
    version?: string;
    /**
     * Wallet app name.
     */
    wallet_app_name?: string;
    /**
     * Wallet app version.
     */
    wallet_app_version?: string;
    /**
     * Unique wallet ID.
     */
    wallet_id?: string;
};

export type PostEventsData = {
    /**
     * events
     */
    body: Array<TonConnectEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events';
};

export type PostEventsBridgeConnectErrorData = {
    /**
     * events
     */
    body: Array<BridgeConnectErrorEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/bridge-connect-error';
};

export type PostEventsBridgeConnectEstablishedData = {
    /**
     * events
     */
    body: Array<BridgeConnectEstablishedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/bridge-connect-established';
};

export type PostEventsBridgeConnectStartedData = {
    /**
     * events
     */
    body: Array<BridgeConnectStartedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/bridge-connect-started';
};

export type PostEventsBridgeRequestDecodeErrorData = {
    /**
     * error
     */
    body: Array<BridgeRequestDecodeErrorEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/bridge-request-decode-error';
};

export type PostEventsBridgeRequestReceivedData = {
    /**
     * events
     */
    body: Array<BridgeRequestReceivedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/bridge-request-received';
};

export type PostEventsBridgeRequestSentData = {
    /**
     * events
     */
    body: Array<BridgeRequestSentEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/bridge-request-sent';
};

export type PostEventsBridgeResponseDecodeErrorData = {
    /**
     * error
     */
    body: Array<BridgeResponseDecodeErrorEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/bridge-response-decode-error';
};

export type PostEventsBridgeResponseReceivedData = {
    /**
     * events
     */
    body: Array<BridgeResponseReceivedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/bridge-response-received';
};

export type PostEventsConnectionCompletedData = {
    /**
     * events
     */
    body: Array<ConnectionCompletedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/connection-completed';
};

export type PostEventsConnectionErrorData = {
    /**
     * events
     */
    body: Array<ConnectionErrorEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/connection-error';
};

export type PostEventsConnectionSelectedWalletData = {
    /**
     * events
     */
    body: Array<ConnectionSelectedWalletEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/connection-selected-wallet';
};

export type PostEventsConnectionStartedData = {
    /**
     * events
     */
    body: Array<ConnectionStartedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/connection-started';
};

export type PostEventsDisconnectionData = {
    /**
     * events
     */
    body: Array<DisconnectionEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/disconnection';
};

export type PostEventsJsBridgeCallData = {
    /**
     * events
     */
    body: Array<JsBridgeCallEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/js-bridge-call';
};

export type PostEventsJsBridgeErrorData = {
    /**
     * events
     */
    body: Array<JsBridgeErrorEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/js-bridge-error';
};

export type PostEventsJsBridgeResponseData = {
    /**
     * events
     */
    body: Array<JsBridgeResponseEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/js-bridge-response';
};

export type PostEventsTransactionSentData = {
    /**
     * events
     */
    body: Array<TransactionSentEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/transaction-sent';
};

export type PostEventsTransactionSignedData = {
    /**
     * events
     */
    body: Array<TransactionSignedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/transaction-signed';
};

export type PostEventsTransactionSigningFailedData = {
    /**
     * events
     */
    body: Array<TransactionSigningFailedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/transaction-signing-failed';
};

export type PostEventsWalletConnectAcceptedData = {
    /**
     * events
     */
    body: Array<WalletConnectAcceptedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-connect-accepted';
};

export type PostEventsWalletConnectRejectedData = {
    /**
     * events
     */
    body: Array<WalletConnectRejectedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-connect-rejected';
};

export type PostEventsWalletConnectRequestReceivedData = {
    /**
     * events
     */
    body: Array<WalletConnectRequestReceivedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-connect-request-received';
};

export type PostEventsWalletConnectRequestUiDisplayedData = {
    /**
     * events
     */
    body: Array<WalletConnectRequestUiDisplayedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-connect-request-ui-displayed';
};

export type PostEventsWalletConnectResponseSentData = {
    /**
     * events
     */
    body: Array<WalletConnectResponseSentEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-connect-response-sent';
};

export type PostEventsWalletSignDataAcceptedData = {
    /**
     * events
     */
    body: Array<WalletSignDataAcceptedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-sign-data-accepted';
};

export type PostEventsWalletSignDataConfirmationUiDisplayedData = {
    /**
     * events
     */
    body: Array<WalletSignDataConfirmationUiDisplayedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-sign-data-confirmation-ui-displayed';
};

export type PostEventsWalletSignDataDeclinedData = {
    /**
     * events
     */
    body: Array<ApiWalletSignDataDeclinedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-sign-data-declined';
};

export type PostEventsWalletSignDataRequestReceivedData = {
    /**
     * events
     */
    body: Array<WalletSignDataRequestReceivedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-sign-data-request-received';
};

export type PostEventsWalletSignDataSentData = {
    /**
     * events
     */
    body: Array<WalletSignDataSentEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-sign-data-sent';
};

export type PostEventsWalletTransactionAcceptedData = {
    /**
     * events
     */
    body: Array<WalletTransactionAcceptedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-transaction-accepted';
};

export type PostEventsWalletTransactionConfirmationUiDisplayedData = {
    /**
     * events
     */
    body: Array<WalletTransactionConfirmationUiDisplayedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-transaction-confirmation-ui-displayed';
};

export type PostEventsWalletTransactionDeclinedData = {
    /**
     * events
     */
    body: Array<WalletTransactionDeclinedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-transaction-declined';
};

export type PostEventsWalletTransactionRequestReceivedData = {
    /**
     * events
     */
    body: Array<WalletTransactionRequestReceivedEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-transaction-request-received';
};

export type PostEventsWalletTransactionSentData = {
    /**
     * events
     */
    body: Array<WalletTransactionSentEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-transaction-sent';
};

export type PostEventsWalletTransactionSentBridgeData = {
    /**
     * events
     */
    body: Array<WalletTransactionSentBridgeEvent>;
    headers?: {
        /**
         * Unix timestamp on the client at the time of sending
         */
        'X-Client-Timestamp'?: number;
    };
    path?: never;
    query?: never;
    url: '/events/wallet-transaction-sent-bridge';
};

export type ClientOptions = {
    baseUrl: 'https://analytics.ton.org' | (string & {});
};
